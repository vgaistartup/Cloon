import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, RefreshControl, Alert } from 'react-native';
import Screen from '@/components/Screen';
import { Colors, Typography, Spacing, BorderRadius, Layout, Shadows } from '@/constants/theme';
import HeaderCloset, { type ClosetSegment, type ClosetViewMode } from '@/components/HeaderCloset';

export default function ClosetScreen() {
  const [segment, setSegment] = React.useState<ClosetSegment>('looks');
  const [viewMode, setViewMode] = React.useState<ClosetViewMode>('grid');
  const [refreshing, setRefreshing] = React.useState(false);
  const [mode, setMode] = React.useState<'browse' | 'select'>('browse');
  const [selected, setSelected] = React.useState<number[]>([]);
  const [isEmpty, setIsEmpty] = React.useState(false);

  const onRefresh = async () => {
    setRefreshing(true);
    // TODO: fetch closet contents
    await new Promise((r) => setTimeout(r, 600));
    setRefreshing(false);
  };

  const toggleSelect = (id: number) => {
    if (mode === 'browse') setMode('select');
    setSelected((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]));
  };

  const cancelSelection = () => {
    setSelected([]);
    setMode('browse');
  };

  const shareSelected = () => Alert.alert('Share', `Sharing ${selected.length} items`);
  const postSelected = () => Alert.alert('Post', `Posting ${selected.length} items`);
  const deleteSelected = () => {
    Alert.alert('Delete', `Delete ${selected.length} items?`, [
      { text: 'Cancel', style: 'cancel' },
      { text: 'Delete', style: 'destructive', onPress: () => { setSelected([]); setMode('browse'); } },
    ]);
  };

  return (
    <Screen style={styles.container} hasBottomTabs={true}>
      <HeaderCloset
        segment={segment}
        onSegmentChange={setSegment}
        viewMode={viewMode}
        onToggleView={() => setViewMode((m) => (m === 'grid' ? 'list' : 'grid'))}
        onSearch={() => {}}
        scrolled={false}
        mode={mode}
        selectedCount={selected.length}
        onCancelSelection={cancelSelection}
        onShareSelected={shareSelected}
        onPostSelected={postSelected}
        onDeleteSelected={deleteSelected}
        empty={isEmpty}
        onCreateAlbum={() => Alert.alert('Create Album', 'New album created')}
      />

      {/* Apple Photos-style Grid */}
      <ScrollView 
        style={styles.content}
        contentContainerStyle={styles.contentContainer}
        showsVerticalScrollIndicator={false}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
      >
        <View style={styles.gridContainer}>
          {/* Section: Recent */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Recent</Text>
            <View style={styles.grid}>
              {[1, 2, 3, 4, 5, 6].map((item) => (
                <TouchableOpacity key={item} style={[styles.gridItem, selected.includes(item) && styles.gridItemSelected]} onLongPress={() => toggleSelect(item)} onPress={() => mode === 'select' ? toggleSelect(item) : null}>
                  <View style={styles.gridImage} />
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {/* Section: Favorites */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Favorites</Text>
            <View style={styles.grid}>
              {[7, 8, 9, 10].map((item) => (
                <TouchableOpacity key={item} style={[styles.gridItem, selected.includes(item) && styles.gridItemSelected]} onLongPress={() => toggleSelect(item)} onPress={() => mode === 'select' ? toggleSelect(item) : null}>
                  <View style={styles.gridImage} />
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {/* Section: Collections */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Collections</Text>
            <View style={styles.collectionsGrid}>
              {['Summer', 'Work', 'Casual', 'Formal'].map((collection) => (
                <TouchableOpacity key={collection} style={styles.collectionCard}>
                  <View style={styles.collectionImage} />
                  <Text style={styles.collectionTitle}>{collection}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
        </View>
      </ScrollView>
      
      {/* Enhanced Bottom Navigation */}
    </Screen>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: Colors.background,
  },

  // Header is provided by HeaderCloset

  // Main Content
  content: {
    flex: 1,
  },
  contentContainer: {
    paddingBottom: Spacing.xxl,
  },
  gridContainer: {
    paddingHorizontal: Layout.sectionMargin,
    paddingTop: Spacing.lg,
  },

  // Sections
  section: {
    marginBottom: Spacing.xxl,
  },
  sectionTitle: {
    fontSize: Typography.fontSize.h2,
    fontWeight: Typography.fontWeight.semibold,
    fontFamily: Typography.fontFamily,
    color: Colors.text.primary,
    marginBottom: Spacing.lg,
  },

  // Photo Grid
  grid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 2,
  },
  gridItem: {
    width: '32.66%',
    aspectRatio: 1,
    backgroundColor: Colors.border,
    borderRadius: BorderRadius.sm,
  },
  gridItemSelected: {
    borderWidth: 2,
    borderColor: Colors.accent,
  },
  gridImage: {
    flex: 1,
    backgroundColor: Colors.border,
    borderRadius: BorderRadius.sm,
  },

  // Collections Grid
  collectionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: Spacing.md,
  },
  collectionCard: {
    width: '48%',
    backgroundColor: Colors.background,
    borderRadius: BorderRadius.xl,
    overflow: 'hidden',
    ...Shadows.card,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  collectionImage: {
    height: 120,
    backgroundColor: Colors.border,
  },
  collectionTitle: {
    fontSize: Typography.fontSize.body,
    fontWeight: Typography.fontWeight.medium,
    fontFamily: Typography.fontFamily,
    color: Colors.text.primary,
    padding: Spacing.md,
    textAlign: 'center',
  },
});